第4条：覆盖equals时请遵守通用约定
类的每个实例本质上都是唯一的
类没有必要提供“逻辑相等”的测试功能
超类已经覆盖了equals，超类的行为对于这个类也是合适的。
类是私有的，或者是包级私有的，可以确定它的equals方法永远不会被调用。

equals方法实现了等价关系，其属性如下：
自反性：对于任何非null的引用值x，x.equals(x)必须返回true。
对称性：对于任何非null的引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)必须返回true。
传递性：对于任何非null的引用值x、y和z，如果x.equals(y)返回true，并且y.equals(z)也返回true，那么x.equals(z)也必须返回true.
一致性：对于任何非null的引用值x 和y，只要equals的比较操作在对象中所用的信息没有被修改，多次调用x.equals(y)就会一致地返回true,或者一致地返回false。
对于任何非null的引用值x, x.equals(null)必须返回false。

覆盖equals 时总要覆盖hashCode
不要企图让equals 方法过于智能
不要将equals声明中的Object对象替换为其他的类型

让IDE生成equals（及hashCode ）方法，通常优于手工实现它们，因为IDE 不会犯粗心的错误，但是程序员会犯错。
总而言之，不要轻易覆盖equals 方法，除非迫不得已

对于既不是float也不是double类型的基本类型域，可以使用==操作符进行比较；