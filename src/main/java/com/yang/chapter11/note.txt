第11条：覆盖equals时总要覆盖hashCode
在每个覆盖了equals方法的类中，都必须覆盖hashCode方法。如果不这样做的话，就会违反hashCode的通用约定，从而导致该类无法结合所有基于散列的集合一起正常运作，这类集合包括HashMap和HashSet

Object规范：
在应用程序的执行期间，只要对象的equals方法的比较操作所用到的信息没有被修改，那么对同一个对象的多次调用，hashCode方法都必须始终返回同一个值。
如果两个对象根据equals(Object)方法比较是相等的，那么调用这两个对象中的hashCode方法都必须产生同样的整数结果。
如果两个对象根据equals(Object)方法比较是不相等的，那么调用这两个对象中的hashCode方法，则不一定要求hashCode方法必须产生不同的结果。但是程序员应该知道，给不相等的对象产生截然不同的整数结果，有可能提高散列表(hashtable)的性能。


必须排除equals比较计算中没有用到的任何域，否则很有可能违反hashCode约定的第二条。
不要试图从散列码计算中排除掉一个对象的关键域来提高性能。
不要对hashCode方法的返回值做出具体的规定，因此客户端无法理所当然地依赖它,这样可以为修改提供灵活性。